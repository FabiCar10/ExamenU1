# -*- coding: utf-8 -*-
"""Examen U1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-587159DdOkg_GqIMSCS1a8PrSoXzETD

# **Examen U1**

**Alumna:** Karina Fabiola Carmona Terrzas
**07 - LCD**

Ejercicio 1

Es número primo?
Verdad si es primo, falso si no es primo
"""

def numPrimo(n):
  for i in range(2, int(n/2)):
    if(n%i) == 0:
      return False
  return True

n = float (input("Ingrese el numero que desee: "))
resultado  = numPrimo(n)
print(resultado)

"""**Ejercicio 2:**

next prime

Encuentra y devuelve el primer número primo mayor que algún número entero, n.
"""

def nextPrime(n):
    prime = n + 1
    while True:
        if numPrimo(prime):
            return prime
        prime += 1

if __name__ == "__main__":
    try:
        n = int(input("Ingrese un número entero: "))
        next_prime = nextPrime(n)
        print(f"El primer número primo mayor que {n} es {next_prime}")
    except ValueError:
        print("Por favor, ingrese un número entero válido.")

"""**Ejercicio 3:**

Mediana de tres valores
"""

def mediana(a,b,c):
    lista = [a,b,c]
    lista.sort()
    return lista[1]

a = float (input("Ingrese el primer valor: "))
b = float (input("Ingrese el primer valor: "))
c = float (input("Ingrese el primer valor: "))

resultado = mediana(a,b,c)
print(resultado)

"""**Ejercicio 4:**

Contraseña aleatoria
"""

import random
import string

def password():
    longitud = random.randint(7, 10)
    contraseña = ''.join(chr(random.randint(33, 126)) for _ in range(longitud))
    return contraseña

if __name__ == "__main__":
    contraseña_generada = password()
    print(f"Contraseña generada: {contraseña_generada}")

"""**Ejercico 5:**

Calocular la hipotenusa
"""

from math import sqrt
import math

def hipotenusa(a,b):
  return (math.sqrt((a**2) + (b**2)))

a = float(input("Introdusca el primer cateto: "))
b = float(input("Introdusca el segundo cateto:"))

resultado = hipotenusa(a,b)
print("La hipotenusa es: ", resultado)